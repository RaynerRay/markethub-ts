generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum ListingType {
  SALE
  RENT
}

enum AmenityType {
  WATER
  ELECTRICITY
  SWIMMING_POOL
  SEWERAGE
  KITCHEN
  BATHROOM
  SECURITY
  PARKING

}

model Property {
  id             String        @id @default(auto()) @map("_id") @db.ObjectId
  title          String
  slug           String        @unique
  imageUrl       String?
  propertyImages String[]
  description    String?
  propertyCode   String?
  contact        String?
  listingType    ListingType

  rentPrice      Float?
  salePrice      Float?
  size           Float?
  beds           Int?
  baths          Int?
  tags           String[]

  amenities      Amenity[]

  //location
  address        String?
  latitude       Float?
  longitude      Float?

  favourites     Favourite[]   // Link to Favourite join model

  cityId         String  @db.ObjectId
  city           City?   @relation(fields: [cityId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  townId         String  @db.ObjectId
  town           Town?   @relation(fields: [townId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  categoryId     String  @db.ObjectId 
  category       Category? @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  companyId      String  @db.ObjectId
  company        Company? @relation(fields: [companyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  

  // Updated agent relationship
  agentProfileId String  @db.ObjectId
  agent          AgentProfile @relation(fields: [agentProfileId], references: [id], onDelete: Cascade)


  subCategoryId  String  @db.ObjectId
  subCategory    SubCategory? @relation(fields: [subCategoryId], references: [id])

  userId         String  @db.ObjectId
  user           User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}

model Category {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  title         String        @unique
  slug          String        @unique
  properties    Property[]
  subcategories SubCategory[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model SubCategory {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  slug       String     @unique
  properties Property[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String   @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
model Advert {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  link        String
  imageUrl    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model City {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String     @unique
  slug        String     @unique
  properties  Property[]
  towns       Town[]

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Town {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String     @unique
  slug        String     @unique
  properties  Property[]
  city        City?      @relation(fields: [cityId], references: [id])
  cityId      String     @db.ObjectId

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}
model Amenity {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  type        AmenityType
  property    Property    @relation(fields: [propertyId], references: [id])
  propertyId  String      @db.ObjectId
}

model Blog {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String     @unique
  imageUrl    String?
  description String?
  content     String?

  categorySlug    String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

enum UserRole {
  ADMIN
  USER
  AGENT
}

model Favourite {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime   @default(now())

  userId      String     @db.ObjectId
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  propertyId  String     @db.ObjectId
  property    Property   @relation(fields: [propertyId], references: [id], onDelete: Cascade, onUpdate: Cascade)
}

model User { 
  id                String        @id @default(auto()) @map("_id") @db.ObjectId
  firstName         String?
  lastName          String?
  email             String?       @unique
  password          String
  properties        Property[]
  role              UserRole      @default(USER)

  favourites        Favourite[]   // Link to Favourite join model
  agentProfile      AgentProfile?
  profile           UserProfile?  // Link to user profile
  createdAt         DateTime      @default(now())
  updatedAt         DateTime?     @updatedAt
}

// Model for normal user profile
model UserProfile {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  userId       String  @unique @db.ObjectId
  // Personal Details
  firstName    String?
  lastName     String?
  email        String?
  username     String?
  phone        String?
  profileImage String?

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AgentProfile {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  profileImageUrl String?
  firstName       String?
  lastName        String?
  email           String?
  phone           String?
  code            String?   @unique
  bio            String?
  properties     Property[] // One-to-many with properties
  
  // Company relationship
  companyId      String?   @db.ObjectId
  company        Company?  @relation(fields: [companyId], references: [id], onDelete: SetNull)

  // User relationship
  userId         String    @unique @db.ObjectId
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt      DateTime  @default(now())
  updatedAt      DateTime? @updatedAt
}

model Company {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  slug        String         @unique
  imageUrl    String?
  description String?
  email       String?
  phone       String?
  phone2      String?
  address     String?
  address2    String?
  website     String?
  properties  Property[]     // One-to-many with properties
  agents      AgentProfile[] // One-to-many with agents

  createdAt   DateTime       @default(now())
  updatedAt   DateTime?      @updatedAt
}
